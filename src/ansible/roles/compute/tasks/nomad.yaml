---

- name: Install Hashi-Up
  copy:
    src: /usr/local/bin/hashi-up
    dest: /usr/local/bin/hashi-up
    mode: u+rwx

- name: Create storage for consul ACLs
  file:
    path: /etc/hashicorp/
    state: directory

- name: Install consul
  command: >-
    hashi-up consul install
    --advertise-addr {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}
    --local
    --http-addr 0.0.0.0
    --retry-join {{ compute_ip }}
    --bootstrap-expect {{ ansible_play_batch | length }}
    --server --connect --acl

- name: Initialize consul ACL
  shell:
    cmd: consul acl bootstrap > /etc/hashicorp/consul.token.tmp && mv /etc/hashicorp/consul.token.tmp /etc/hashicorp/consul.token
    creates: /etc/hashicorp/consul.token
  when: inventory_hostname == compute_ip
  register: acl_bootstrap
  until: acl_bootstrap.rc == 0
  retries: 6
  delay: 10

- name: Copy consul ACL
  fetch:
    src: "/etc/hashicorp/consul.token"
    dest: "/etc/hashicorp/consul.token"
    flat: yes
  when: inventory_hostname == compute_ip

- name: Share consul ACL
  copy:
    src: "/etc/hashicorp/consul.token"
    dest: "/etc/hashicorp/consul.token"

- name: Read consul ACL
  shell:
    cmd: cat /etc/hashicorp/consul.token | grep SecretID | awk '{print $2}'
  register: consul_global_token

- name: Install vault
  command: >-
    hashi-up vault install
    --local
    --consul-token {{ consul_global_token.stdout }}

- name: Install nomad
  command: >-
    hashi-up nomad install
    --local
    --bootstrap-expect {{ ansible_play_batch | length }}
    --server --acl

# TODO Create policy and token for nomad: https://www.consul.io/commands/acl/token
- name: Configure nomad to connect to consul
  copy:
    dest: "/etc/nomad.d/config/consul_acl.hcl"
    content: |
      consul {
        token = "{{ consul_global_token.stdout }}"
      }
  register: nomad_acl_token

- name: Configure nomad client
  copy:
    dest: "/etc/nomad.d/config/client.hcl"
    content: |
      client {
        enabled = true
      }
      plugin "docker" {
        config {
          allow_privileged = true
          volumes {
            enabled = true
          }
        }
      }
  register: nomad_client

- name: Restart nomad
  ansible.builtin.systemd:
    name: nomad
    state: restarted
  when: nomad_acl_token.changed or nomad_client.changed

- name: Initialize nomad ACL
  shell:
    cmd: nomad acl bootstrap > /etc/hashicorp/nomad.token.tmp && mv /etc/hashicorp/nomad.token.tmp /etc/hashicorp/nomad.token
    creates: /etc/hashicorp/nomad.token
  when: inventory_hostname == compute_ip
  register: acl_bootstrap
  until: acl_bootstrap.rc == 0
  retries: 6
  delay: 10

- name: Copy nomad ACL
  fetch:
    src: "/etc/hashicorp/nomad.token"
    dest: "/etc/hashicorp/nomad.token"
    flat: yes
  when: inventory_hostname == compute_ip

- name: Share nomad ACL
  copy:
    src: "/etc/hashicorp/nomad.token"
    dest: "/etc/hashicorp/nomad.token"

- name: Read Nomad ACL
  shell:
    cmd: cat /etc/hashicorp/nomad.token | grep 'Secret ID' | awk '{print $4 }'
  register: nomad_global_token

- name: Confirm nomad connection
  shell:
    cmd: nomad node status -token {{ nomad_global_token.stdout }}
  register: nomad_check
  until: nomad_check.rc == 0
  retries: 6
  delay: 10

- name: Configure nomad memory overallocation
  shell:
    cmd: nomad operator scheduler set-config -token {{ nomad_global_token.stdout }} -memory-oversubscription=true
  when: inventory_hostname == compute_ip